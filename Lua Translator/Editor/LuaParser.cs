//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lua.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
public partial class LuaParser : Parser
{
    protected static DFA[] decisionToDFA;
    protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
    public const int
        T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
        T__9 = 10, T__10 = 11, T__11 = 12, T__12 = 13, T__13 = 14, T__14 = 15, T__15 = 16, T__16 = 17,
        T__17 = 18, T__18 = 19, T__19 = 20, T__20 = 21, T__21 = 22, T__22 = 23, T__23 = 24,
        T__24 = 25, T__25 = 26, T__26 = 27, T__27 = 28, T__28 = 29, T__29 = 30, T__30 = 31,
        T__31 = 32, T__32 = 33, T__33 = 34, T__34 = 35, T__35 = 36, T__36 = 37, T__37 = 38,
        T__38 = 39, T__39 = 40, T__40 = 41, T__41 = 42, T__42 = 43, T__43 = 44, T__44 = 45,
        T__45 = 46, T__46 = 47, T__47 = 48, T__48 = 49, T__49 = 50, T__50 = 51, T__51 = 52,
        T__52 = 53, T__53 = 54, T__54 = 55, NAME = 56, NORMALSTRING = 57, CHARSTRING = 58,
        LONGSTRING = 59, INT = 60, HEX = 61, FLOAT = 62, HEX_FLOAT = 63, COMMENT = 64, LINE_COMMENT = 65,
        WS = 66, SHEBANG = 67;
    public const int
        RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_attnamelist = 3, RULE_attrib = 4,
        RULE_retstat = 5, RULE_label = 6, RULE_funcname = 7, RULE_varlist = 8,
        RULE_namelist = 9, RULE_explist = 10, RULE_exp = 11, RULE_prefixexp = 12,
        RULE_functioncall = 13, RULE_varOrExp = 14, RULE_var_ = 15, RULE_varSuffix = 16,
        RULE_nameAndArgs = 17, RULE_args = 18, RULE_functiondef = 19, RULE_funcbody = 20,
        RULE_parlist = 21, RULE_tableconstructor = 22, RULE_fieldlist = 23, RULE_field = 24,
        RULE_fieldsep = 25, RULE_operatorOr = 26, RULE_operatorAnd = 27, RULE_operatorComparison = 28,
        RULE_operatorStrcat = 29, RULE_operatorAddSub = 30, RULE_operatorMulDivMod = 31,
        RULE_operatorBitwise = 32, RULE_operatorUnary = 33, RULE_operatorPower = 34,
        RULE_number = 35, RULE_string = 36, RULE_nil = 37, RULE_boolean = 38;
    public static readonly string[] ruleNames = {
        "chunk", "block", "stat", "attnamelist", "attrib", "retstat", "label",
        "funcname", "varlist", "namelist", "explist", "exp", "prefixexp", "functioncall",
        "varOrExp", "var_", "varSuffix", "nameAndArgs", "args", "functiondef",
        "funcbody", "parlist", "tableconstructor", "fieldlist", "field", "fieldsep",
        "operatorOr", "operatorAnd", "operatorComparison", "operatorStrcat", "operatorAddSub",
        "operatorMulDivMod", "operatorBitwise", "operatorUnary", "operatorPower",
        "number", "string", "nil", "boolean"
    };

    private static readonly string[] _LiteralNames = {
        null, "';'", "'='", "'break'", "'goto'", "'do'", "'end'", "'while'", "'repeat'",
        "'until'", "'if'", "'then'", "'elseif'", "'else'", "'for'", "','", "'in'",
        "'function'", "'local'", "'<'", "'>'", "'return'", "'::'", "'.'", "':'",
        "'...'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'or'", "'and'", "'<='",
        "'>='", "'~='", "'=='", "'..'", "'+'", "'-'", "'*'", "'/'", "'%'", "'//'",
        "'&'", "'|'", "'~'", "'<<'", "'>>'", "'not'", "'#'", "'^'", "'nil'", "'true'",
        "'false'"
    };
    private static readonly string[] _SymbolicNames = {
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, "NAME", "NORMALSTRING",
        "CHARSTRING", "LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", "COMMENT",
        "LINE_COMMENT", "WS", "SHEBANG"
    };
    public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

    [NotNull]
    public override IVocabulary Vocabulary
    {
        get
        {
            return DefaultVocabulary;
        }
    }

    public override string GrammarFileName { get { return "Lua.g4"; } }

    public override string[] RuleNames { get { return ruleNames; } }

    public override string SerializedAtn { get { return new string(_serializedATN); } }

    static LuaParser()
    {
        decisionToDFA = new DFA[_ATN.NumberOfDecisions];
        for (int i = 0; i < _ATN.NumberOfDecisions; i++)
        {
            decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
        }
    }

    public LuaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

    public LuaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
    : base(input, output, errorOutput)
    {
        Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
    }

    public partial class ChunkContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public BlockContext block()
        {
            return GetRuleContext<BlockContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LuaParser.Eof, 0); }
        public ChunkContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_chunk; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterChunk(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitChunk(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitChunk(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public ChunkContext chunk()
    {
        ChunkContext _localctx = new ChunkContext(Context, State);
        EnterRule(_localctx, 0, RULE_chunk);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 78;
                block();
                State = 79;
                Match(Eof);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class BlockContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public StatContext[] stat()
        {
            return GetRuleContexts<StatContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public StatContext stat(int i)
        {
            return GetRuleContext<StatContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public RetstatContext retstat()
        {
            return GetRuleContext<RetstatContext>(0);
        }
        public BlockContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_block; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterBlock(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitBlock(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitBlock(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public BlockContext block()
    {
        BlockContext _localctx = new BlockContext(Context, State);
        EnterRule(_localctx, 2, RULE_block);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 84;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__9) | (1L << T__13) | (1L << T__16) | (1L << T__17) | (1L << T__21) | (1L << T__25) | (1L << NAME))) != 0))
                {
                    {
                        {
                            State = 81;
                            stat();
                        }
                    }
                    State = 86;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 88;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__20)
                {
                    {
                        State = 87;
                        retstat();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class StatContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public VarlistContext varlist()
        {
            return GetRuleContext<VarlistContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExplistContext explist()
        {
            return GetRuleContext<ExplistContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public FunctioncallContext functioncall()
        {
            return GetRuleContext<FunctioncallContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public LabelContext label()
        {
            return GetRuleContext<LabelContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public BlockContext[] block()
        {
            return GetRuleContexts<BlockContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public BlockContext block(int i)
        {
            return GetRuleContext<BlockContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExpContext[] exp()
        {
            return GetRuleContexts<ExpContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExpContext exp(int i)
        {
            return GetRuleContext<ExpContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public NamelistContext namelist()
        {
            return GetRuleContext<NamelistContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public FuncnameContext funcname()
        {
            return GetRuleContext<FuncnameContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public FuncbodyContext funcbody()
        {
            return GetRuleContext<FuncbodyContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public AttnamelistContext attnamelist()
        {
            return GetRuleContext<AttnamelistContext>(0);
        }
        public StatContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_stat; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterStat(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitStat(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitStat(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public StatContext stat()
    {
        StatContext _localctx = new StatContext(Context, State);
        EnterRule(_localctx, 4, RULE_stat);
        int _la;
        try
        {
            State = 171;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 6, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 90;
                        Match(T__0);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 91;
                        varlist();
                        State = 92;
                        Match(T__1);
                        State = 93;
                        explist();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 95;
                        functioncall();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 96;
                        label();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 97;
                        Match(T__2);
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 98;
                        Match(T__3);
                        State = 99;
                        Match(NAME);
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 100;
                        Match(T__4);
                        State = 101;
                        block();
                        State = 102;
                        Match(T__5);
                    }
                    break;
                case 8:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 104;
                        Match(T__6);
                        State = 105;
                        exp(0);
                        State = 106;
                        Match(T__4);
                        State = 107;
                        block();
                        State = 108;
                        Match(T__5);
                    }
                    break;
                case 9:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 110;
                        Match(T__7);
                        State = 111;
                        block();
                        State = 112;
                        Match(T__8);
                        State = 113;
                        exp(0);
                    }
                    break;
                case 10:
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 115;
                        Match(T__9);
                        State = 116;
                        exp(0);
                        State = 117;
                        Match(T__10);
                        State = 118;
                        block();
                        State = 126;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == T__11)
                        {
                            {
                                {
                                    State = 119;
                                    Match(T__11);
                                    State = 120;
                                    exp(0);
                                    State = 121;
                                    Match(T__10);
                                    State = 122;
                                    block();
                                }
                            }
                            State = 128;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 131;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == T__12)
                        {
                            {
                                State = 129;
                                Match(T__12);
                                State = 130;
                                block();
                            }
                        }

                        State = 133;
                        Match(T__5);
                    }
                    break;
                case 11:
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 135;
                        Match(T__13);
                        State = 136;
                        Match(NAME);
                        State = 137;
                        Match(T__1);
                        State = 138;
                        exp(0);
                        State = 139;
                        Match(T__14);
                        State = 140;
                        exp(0);
                        State = 143;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == T__14)
                        {
                            {
                                State = 141;
                                Match(T__14);
                                State = 142;
                                exp(0);
                            }
                        }

                        State = 145;
                        Match(T__4);
                        State = 146;
                        block();
                        State = 147;
                        Match(T__5);
                    }
                    break;
                case 12:
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 149;
                        Match(T__13);
                        State = 150;
                        namelist();
                        State = 151;
                        Match(T__15);
                        State = 152;
                        explist();
                        State = 153;
                        Match(T__4);
                        State = 154;
                        block();
                        State = 155;
                        Match(T__5);
                    }
                    break;
                case 13:
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 157;
                        Match(T__16);
                        State = 158;
                        funcname();
                        State = 159;
                        funcbody();
                    }
                    break;
                case 14:
                    EnterOuterAlt(_localctx, 14);
                    {
                        State = 161;
                        Match(T__17);
                        State = 162;
                        Match(T__16);
                        State = 163;
                        Match(NAME);
                        State = 164;
                        funcbody();
                    }
                    break;
                case 15:
                    EnterOuterAlt(_localctx, 15);
                    {
                        State = 165;
                        Match(T__17);
                        State = 166;
                        attnamelist();
                        State = 169;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == T__1)
                        {
                            {
                                State = 167;
                                Match(T__1);
                                State = 168;
                                explist();
                            }
                        }

                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AttnamelistContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode NAME(int i)
        {
            return GetToken(LuaParser.NAME, i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public AttribContext[] attrib()
        {
            return GetRuleContexts<AttribContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public AttribContext attrib(int i)
        {
            return GetRuleContext<AttribContext>(i);
        }
        public AttnamelistContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_attnamelist; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterAttnamelist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitAttnamelist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitAttnamelist(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public AttnamelistContext attnamelist()
    {
        AttnamelistContext _localctx = new AttnamelistContext(Context, State);
        EnterRule(_localctx, 6, RULE_attnamelist);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 173;
                Match(NAME);
                State = 174;
                attrib();
                State = 180;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__14)
                {
                    {
                        {
                            State = 175;
                            Match(T__14);
                            State = 176;
                            Match(NAME);
                            State = 177;
                            attrib();
                        }
                    }
                    State = 182;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AttribContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
        public AttribContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_attrib; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterAttrib(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitAttrib(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitAttrib(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public AttribContext attrib()
    {
        AttribContext _localctx = new AttribContext(Context, State);
        EnterRule(_localctx, 8, RULE_attrib);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 186;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__18)
                {
                    {
                        State = 183;
                        Match(T__18);
                        State = 184;
                        Match(NAME);
                        State = 185;
                        Match(T__19);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RetstatContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExplistContext explist()
        {
            return GetRuleContext<ExplistContext>(0);
        }
        public RetstatContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_retstat; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterRetstat(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitRetstat(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitRetstat(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public RetstatContext retstat()
    {
        RetstatContext _localctx = new RetstatContext(Context, State);
        EnterRule(_localctx, 10, RULE_retstat);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 188;
                Match(T__20);
                State = 190;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__24) | (1L << T__25) | (1L << T__29) | (1L << T__39) | (1L << T__46) | (1L << T__49) | (1L << T__50) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0))
                {
                    {
                        State = 189;
                        explist();
                    }
                }

                State = 193;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__0)
                {
                    {
                        State = 192;
                        Match(T__0);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LabelContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
        public LabelContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_label; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterLabel(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitLabel(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitLabel(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public LabelContext label()
    {
        LabelContext _localctx = new LabelContext(Context, State);
        EnterRule(_localctx, 12, RULE_label);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 195;
                Match(T__21);
                State = 196;
                Match(NAME);
                State = 197;
                Match(T__21);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FuncnameContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode NAME(int i)
        {
            return GetToken(LuaParser.NAME, i);
        }
        public FuncnameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_funcname; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterFuncname(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitFuncname(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public FuncnameContext funcname()
    {
        FuncnameContext _localctx = new FuncnameContext(Context, State);
        EnterRule(_localctx, 14, RULE_funcname);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 199;
                Match(NAME);
                State = 204;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__22)
                {
                    {
                        {
                            State = 200;
                            Match(T__22);
                            State = 201;
                            Match(NAME);
                        }
                    }
                    State = 206;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 209;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__23)
                {
                    {
                        State = 207;
                        Match(T__23);
                        State = 208;
                        Match(NAME);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class VarlistContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public Var_Context[] var_()
        {
            return GetRuleContexts<Var_Context>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Var_Context var_(int i)
        {
            return GetRuleContext<Var_Context>(i);
        }
        public VarlistContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_varlist; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterVarlist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitVarlist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public VarlistContext varlist()
    {
        VarlistContext _localctx = new VarlistContext(Context, State);
        EnterRule(_localctx, 16, RULE_varlist);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 211;
                var_();
                State = 216;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__14)
                {
                    {
                        {
                            State = 212;
                            Match(T__14);
                            State = 213;
                            var_();
                        }
                    }
                    State = 218;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class NamelistContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode NAME(int i)
        {
            return GetToken(LuaParser.NAME, i);
        }
        public NamelistContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_namelist; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterNamelist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitNamelist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public NamelistContext namelist()
    {
        NamelistContext _localctx = new NamelistContext(Context, State);
        EnterRule(_localctx, 18, RULE_namelist);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 219;
                Match(NAME);
                State = 224;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 14, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 220;
                                Match(T__14);
                                State = 221;
                                Match(NAME);
                            }
                        }
                    }
                    State = 226;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 14, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExplistContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExpContext[] exp()
        {
            return GetRuleContexts<ExpContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExpContext exp(int i)
        {
            return GetRuleContext<ExpContext>(i);
        }
        public ExplistContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_explist; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterExplist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitExplist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitExplist(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public ExplistContext explist()
    {
        ExplistContext _localctx = new ExplistContext(Context, State);
        EnterRule(_localctx, 20, RULE_explist);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 227;
                exp(0);
                State = 232;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__14)
                {
                    {
                        {
                            State = 228;
                            Match(T__14);
                            State = 229;
                            exp(0);
                        }
                    }
                    State = 234;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExpContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public NilContext nil()
        {
            return GetRuleContext<NilContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public BooleanContext boolean()
        {
            return GetRuleContext<BooleanContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public NumberContext number()
        {
            return GetRuleContext<NumberContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public StringContext @string()
        {
            return GetRuleContext<StringContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public FunctiondefContext functiondef()
        {
            return GetRuleContext<FunctiondefContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public PrefixexpContext prefixexp()
        {
            return GetRuleContext<PrefixexpContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public TableconstructorContext tableconstructor()
        {
            return GetRuleContext<TableconstructorContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public OperatorUnaryContext operatorUnary()
        {
            return GetRuleContext<OperatorUnaryContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExpContext[] exp()
        {
            return GetRuleContexts<ExpContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExpContext exp(int i)
        {
            return GetRuleContext<ExpContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public OperatorPowerContext operatorPower()
        {
            return GetRuleContext<OperatorPowerContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public OperatorMulDivModContext operatorMulDivMod()
        {
            return GetRuleContext<OperatorMulDivModContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public OperatorAddSubContext operatorAddSub()
        {
            return GetRuleContext<OperatorAddSubContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public OperatorStrcatContext operatorStrcat()
        {
            return GetRuleContext<OperatorStrcatContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public OperatorComparisonContext operatorComparison()
        {
            return GetRuleContext<OperatorComparisonContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public OperatorAndContext operatorAnd()
        {
            return GetRuleContext<OperatorAndContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public OperatorOrContext operatorOr()
        {
            return GetRuleContext<OperatorOrContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public OperatorBitwiseContext operatorBitwise()
        {
            return GetRuleContext<OperatorBitwiseContext>(0);
        }
        public ExpContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_exp; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterExp(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitExp(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitExp(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public ExpContext exp()
    {
        return exp(0);
    }

    private ExpContext exp(int _p)
    {
        ParserRuleContext _parentctx = Context;
        int _parentState = State;
        ExpContext _localctx = new ExpContext(Context, _parentState);
        ExpContext _prevctx = _localctx;
        int _startState = 22;
        EnterRecursionRule(_localctx, 22, RULE_exp, _p);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 247;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case T__52:
                        {
                            State = 236;
                            nil();
                        }
                        break;
                    case T__53:
                    case T__54:
                        {
                            State = 237;
                            boolean();
                        }
                        break;
                    case INT:
                    case HEX:
                    case FLOAT:
                    case HEX_FLOAT:
                        {
                            State = 238;
                            number();
                        }
                        break;
                    case NORMALSTRING:
                    case CHARSTRING:
                    case LONGSTRING:
                        {
                            State = 239;
                            @string();
                        }
                        break;
                    case T__24:
                        {
                            State = 240;
                            Match(T__24);
                        }
                        break;
                    case T__16:
                        {
                            State = 241;
                            functiondef();
                        }
                        break;
                    case T__25:
                    case NAME:
                        {
                            State = 242;
                            prefixexp();
                        }
                        break;
                    case T__29:
                        {
                            State = 243;
                            tableconstructor();
                        }
                        break;
                    case T__39:
                    case T__46:
                    case T__49:
                    case T__50:
                        {
                            State = 244;
                            operatorUnary();
                            State = 245;
                            exp(8);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                Context.Stop = TokenStream.LT(-1);
                State = 283;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 18, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        if (ParseListeners != null)
                            TriggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            State = 281;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 17, Context))
                            {
                                case 1:
                                    {
                                        _localctx = new ExpContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_exp);
                                        State = 249;
                                        if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
                                        State = 250;
                                        operatorPower();
                                        State = 251;
                                        exp(9);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new ExpContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_exp);
                                        State = 253;
                                        if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
                                        State = 254;
                                        operatorMulDivMod();
                                        State = 255;
                                        exp(8);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new ExpContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_exp);
                                        State = 257;
                                        if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
                                        State = 258;
                                        operatorAddSub();
                                        State = 259;
                                        exp(7);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new ExpContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_exp);
                                        State = 261;
                                        if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
                                        State = 262;
                                        operatorStrcat();
                                        State = 263;
                                        exp(5);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new ExpContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_exp);
                                        State = 265;
                                        if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
                                        State = 266;
                                        operatorComparison();
                                        State = 267;
                                        exp(5);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new ExpContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_exp);
                                        State = 269;
                                        if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
                                        State = 270;
                                        operatorAnd();
                                        State = 271;
                                        exp(4);
                                    }
                                    break;
                                case 7:
                                    {
                                        _localctx = new ExpContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_exp);
                                        State = 273;
                                        if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
                                        State = 274;
                                        operatorOr();
                                        State = 275;
                                        exp(3);
                                    }
                                    break;
                                case 8:
                                    {
                                        _localctx = new ExpContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_exp);
                                        State = 277;
                                        if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
                                        State = 278;
                                        operatorBitwise();
                                        State = 279;
                                        exp(2);
                                    }
                                    break;
                            }
                        }
                    }
                    State = 285;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 18, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            UnrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public partial class PrefixexpContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public VarOrExpContext varOrExp()
        {
            return GetRuleContext<VarOrExpContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public NameAndArgsContext[] nameAndArgs()
        {
            return GetRuleContexts<NameAndArgsContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public NameAndArgsContext nameAndArgs(int i)
        {
            return GetRuleContext<NameAndArgsContext>(i);
        }
        public PrefixexpContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_prefixexp; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterPrefixexp(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitPrefixexp(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public PrefixexpContext prefixexp()
    {
        PrefixexpContext _localctx = new PrefixexpContext(Context, State);
        EnterRule(_localctx, 24, RULE_prefixexp);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 286;
                varOrExp();
                State = 290;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 19, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 287;
                                nameAndArgs();
                            }
                        }
                    }
                    State = 292;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 19, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FunctioncallContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public VarOrExpContext varOrExp()
        {
            return GetRuleContext<VarOrExpContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public NameAndArgsContext[] nameAndArgs()
        {
            return GetRuleContexts<NameAndArgsContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public NameAndArgsContext nameAndArgs(int i)
        {
            return GetRuleContext<NameAndArgsContext>(i);
        }
        public FunctioncallContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_functioncall; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterFunctioncall(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitFunctioncall(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public FunctioncallContext functioncall()
    {
        FunctioncallContext _localctx = new FunctioncallContext(Context, State);
        EnterRule(_localctx, 26, RULE_functioncall);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 293;
                varOrExp();
                State = 295;
                ErrorHandler.Sync(this);
                _alt = 1;
                do
                {
                    switch (_alt)
                    {
                        case 1:
                            {
                                {
                                    State = 294;
                                    nameAndArgs();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 297;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 20, Context);
                } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class VarOrExpContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public Var_Context var_()
        {
            return GetRuleContext<Var_Context>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExpContext exp()
        {
            return GetRuleContext<ExpContext>(0);
        }
        public VarOrExpContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_varOrExp; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterVarOrExp(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitVarOrExp(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public VarOrExpContext varOrExp()
    {
        VarOrExpContext _localctx = new VarOrExpContext(Context, State);
        EnterRule(_localctx, 28, RULE_varOrExp);
        try
        {
            State = 304;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 21, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 299;
                        var_();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 300;
                        Match(T__25);
                        State = 301;
                        exp(0);
                        State = 302;
                        Match(T__26);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Var_Context : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExpContext exp()
        {
            return GetRuleContext<ExpContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public VarSuffixContext[] varSuffix()
        {
            return GetRuleContexts<VarSuffixContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public VarSuffixContext varSuffix(int i)
        {
            return GetRuleContext<VarSuffixContext>(i);
        }
        public Var_Context(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_var_; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterVar_(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitVar_(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitVar_(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Var_Context var_()
    {
        Var_Context _localctx = new Var_Context(Context, State);
        EnterRule(_localctx, 30, RULE_var_);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 312;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case NAME:
                        {
                            State = 306;
                            Match(NAME);
                        }
                        break;
                    case T__25:
                        {
                            State = 307;
                            Match(T__25);
                            State = 308;
                            exp(0);
                            State = 309;
                            Match(T__26);
                            State = 310;
                            varSuffix();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                State = 317;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 23, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 314;
                                varSuffix();
                            }
                        }
                    }
                    State = 319;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 23, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class VarSuffixContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExpContext exp()
        {
            return GetRuleContext<ExpContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public NameAndArgsContext[] nameAndArgs()
        {
            return GetRuleContexts<NameAndArgsContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public NameAndArgsContext nameAndArgs(int i)
        {
            return GetRuleContext<NameAndArgsContext>(i);
        }
        public VarSuffixContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_varSuffix; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterVarSuffix(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitVarSuffix(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public VarSuffixContext varSuffix()
    {
        VarSuffixContext _localctx = new VarSuffixContext(Context, State);
        EnterRule(_localctx, 32, RULE_varSuffix);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 323;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__23) | (1L << T__25) | (1L << T__29) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0))
                {
                    {
                        {
                            State = 320;
                            nameAndArgs();
                        }
                    }
                    State = 325;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 332;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case T__27:
                        {
                            State = 326;
                            Match(T__27);
                            State = 327;
                            exp(0);
                            State = 328;
                            Match(T__28);
                        }
                        break;
                    case T__22:
                        {
                            State = 330;
                            Match(T__22);
                            State = 331;
                            Match(NAME);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class NameAndArgsContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ArgsContext args()
        {
            return GetRuleContext<ArgsContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
        public NameAndArgsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_nameAndArgs; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterNameAndArgs(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitNameAndArgs(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public NameAndArgsContext nameAndArgs()
    {
        NameAndArgsContext _localctx = new NameAndArgsContext(Context, State);
        EnterRule(_localctx, 34, RULE_nameAndArgs);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 336;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__23)
                {
                    {
                        State = 334;
                        Match(T__23);
                        State = 335;
                        Match(NAME);
                    }
                }

                State = 338;
                args();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ArgsContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExplistContext explist()
        {
            return GetRuleContext<ExplistContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public TableconstructorContext tableconstructor()
        {
            return GetRuleContext<TableconstructorContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public StringContext @string()
        {
            return GetRuleContext<StringContext>(0);
        }
        public ArgsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_args; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterArgs(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitArgs(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitArgs(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public ArgsContext args()
    {
        ArgsContext _localctx = new ArgsContext(Context, State);
        EnterRule(_localctx, 36, RULE_args);
        int _la;
        try
        {
            State = 347;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__25:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 340;
                        Match(T__25);
                        State = 342;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__24) | (1L << T__25) | (1L << T__29) | (1L << T__39) | (1L << T__46) | (1L << T__49) | (1L << T__50) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0))
                        {
                            {
                                State = 341;
                                explist();
                            }
                        }

                        State = 344;
                        Match(T__26);
                    }
                    break;
                case T__29:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 345;
                        tableconstructor();
                    }
                    break;
                case NORMALSTRING:
                case CHARSTRING:
                case LONGSTRING:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 346;
                        @string();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FunctiondefContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public FuncbodyContext funcbody()
        {
            return GetRuleContext<FuncbodyContext>(0);
        }
        public FunctiondefContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_functiondef; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterFunctiondef(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitFunctiondef(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public FunctiondefContext functiondef()
    {
        FunctiondefContext _localctx = new FunctiondefContext(Context, State);
        EnterRule(_localctx, 38, RULE_functiondef);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 349;
                Match(T__16);
                State = 350;
                funcbody();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FuncbodyContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public BlockContext block()
        {
            return GetRuleContext<BlockContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ParlistContext parlist()
        {
            return GetRuleContext<ParlistContext>(0);
        }
        public FuncbodyContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_funcbody; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterFuncbody(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitFuncbody(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public FuncbodyContext funcbody()
    {
        FuncbodyContext _localctx = new FuncbodyContext(Context, State);
        EnterRule(_localctx, 40, RULE_funcbody);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 352;
                Match(T__25);
                State = 354;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__24 || _la == NAME)
                {
                    {
                        State = 353;
                        parlist();
                    }
                }

                State = 356;
                Match(T__26);
                State = 357;
                block();
                State = 358;
                Match(T__5);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ParlistContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public NamelistContext namelist()
        {
            return GetRuleContext<NamelistContext>(0);
        }
        public ParlistContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_parlist; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterParlist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitParlist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitParlist(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public ParlistContext parlist()
    {
        ParlistContext _localctx = new ParlistContext(Context, State);
        EnterRule(_localctx, 42, RULE_parlist);
        int _la;
        try
        {
            State = 366;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case NAME:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 360;
                        namelist();
                        State = 363;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == T__14)
                        {
                            {
                                State = 361;
                                Match(T__14);
                                State = 362;
                                Match(T__24);
                            }
                        }

                    }
                    break;
                case T__24:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 365;
                        Match(T__24);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TableconstructorContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public FieldlistContext fieldlist()
        {
            return GetRuleContext<FieldlistContext>(0);
        }
        public TableconstructorContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tableconstructor; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterTableconstructor(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitTableconstructor(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public TableconstructorContext tableconstructor()
    {
        TableconstructorContext _localctx = new TableconstructorContext(Context, State);
        EnterRule(_localctx, 44, RULE_tableconstructor);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 368;
                Match(T__29);
                State = 370;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__24) | (1L << T__25) | (1L << T__27) | (1L << T__29) | (1L << T__39) | (1L << T__46) | (1L << T__49) | (1L << T__50) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0))
                {
                    {
                        State = 369;
                        fieldlist();
                    }
                }

                State = 372;
                Match(T__30);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FieldlistContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public FieldContext[] field()
        {
            return GetRuleContexts<FieldContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public FieldContext field(int i)
        {
            return GetRuleContext<FieldContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public FieldsepContext[] fieldsep()
        {
            return GetRuleContexts<FieldsepContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public FieldsepContext fieldsep(int i)
        {
            return GetRuleContext<FieldsepContext>(i);
        }
        public FieldlistContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_fieldlist; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterFieldlist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitFieldlist(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public FieldlistContext fieldlist()
    {
        FieldlistContext _localctx = new FieldlistContext(Context, State);
        EnterRule(_localctx, 46, RULE_fieldlist);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 374;
                field();
                State = 380;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 33, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 375;
                                fieldsep();
                                State = 376;
                                field();
                            }
                        }
                    }
                    State = 382;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 33, Context);
                }
                State = 384;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__0 || _la == T__14)
                {
                    {
                        State = 383;
                        fieldsep();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FieldContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExpContext[] exp()
        {
            return GetRuleContexts<ExpContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExpContext exp(int i)
        {
            return GetRuleContext<ExpContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
        public FieldContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_field; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterField(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitField(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitField(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public FieldContext field()
    {
        FieldContext _localctx = new FieldContext(Context, State);
        EnterRule(_localctx, 48, RULE_field);
        try
        {
            State = 396;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 35, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 386;
                        Match(T__27);
                        State = 387;
                        exp(0);
                        State = 388;
                        Match(T__28);
                        State = 389;
                        Match(T__1);
                        State = 390;
                        exp(0);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 392;
                        Match(NAME);
                        State = 393;
                        Match(T__1);
                        State = 394;
                        exp(0);
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 395;
                        exp(0);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FieldsepContext : ParserRuleContext
    {
        public FieldsepContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_fieldsep; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterFieldsep(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitFieldsep(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public FieldsepContext fieldsep()
    {
        FieldsepContext _localctx = new FieldsepContext(Context, State);
        EnterRule(_localctx, 50, RULE_fieldsep);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 398;
                _la = TokenStream.LA(1);
                if (!(_la == T__0 || _la == T__14))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OperatorOrContext : ParserRuleContext
    {
        public OperatorOrContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_operatorOr; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterOperatorOr(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitOperatorOr(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public OperatorOrContext operatorOr()
    {
        OperatorOrContext _localctx = new OperatorOrContext(Context, State);
        EnterRule(_localctx, 52, RULE_operatorOr);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 400;
                Match(T__31);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OperatorAndContext : ParserRuleContext
    {
        public OperatorAndContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_operatorAnd; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterOperatorAnd(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitOperatorAnd(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public OperatorAndContext operatorAnd()
    {
        OperatorAndContext _localctx = new OperatorAndContext(Context, State);
        EnterRule(_localctx, 54, RULE_operatorAnd);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 402;
                Match(T__32);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OperatorComparisonContext : ParserRuleContext
    {
        public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_operatorComparison; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterOperatorComparison(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitOperatorComparison(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public OperatorComparisonContext operatorComparison()
    {
        OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
        EnterRule(_localctx, 56, RULE_operatorComparison);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 404;
                _la = TokenStream.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OperatorStrcatContext : ParserRuleContext
    {
        public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_operatorStrcat; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterOperatorStrcat(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitOperatorStrcat(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public OperatorStrcatContext operatorStrcat()
    {
        OperatorStrcatContext _localctx = new OperatorStrcatContext(Context, State);
        EnterRule(_localctx, 58, RULE_operatorStrcat);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 406;
                Match(T__37);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OperatorAddSubContext : ParserRuleContext
    {
        public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_operatorAddSub; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterOperatorAddSub(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitOperatorAddSub(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public OperatorAddSubContext operatorAddSub()
    {
        OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
        EnterRule(_localctx, 60, RULE_operatorAddSub);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 408;
                _la = TokenStream.LA(1);
                if (!(_la == T__38 || _la == T__39))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OperatorMulDivModContext : ParserRuleContext
    {
        public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public OperatorMulDivModContext operatorMulDivMod()
    {
        OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
        EnterRule(_localctx, 62, RULE_operatorMulDivMod);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 410;
                _la = TokenStream.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OperatorBitwiseContext : ParserRuleContext
    {
        public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_operatorBitwise; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterOperatorBitwise(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitOperatorBitwise(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public OperatorBitwiseContext operatorBitwise()
    {
        OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
        EnterRule(_localctx, 64, RULE_operatorBitwise);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 412;
                _la = TokenStream.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OperatorUnaryContext : ParserRuleContext
    {
        public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_operatorUnary; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterOperatorUnary(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitOperatorUnary(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public OperatorUnaryContext operatorUnary()
    {
        OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
        EnterRule(_localctx, 66, RULE_operatorUnary);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 414;
                _la = TokenStream.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__46) | (1L << T__49) | (1L << T__50))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OperatorPowerContext : ParserRuleContext
    {
        public OperatorPowerContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_operatorPower; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterOperatorPower(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitOperatorPower(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public OperatorPowerContext operatorPower()
    {
        OperatorPowerContext _localctx = new OperatorPowerContext(Context, State);
        EnterRule(_localctx, 68, RULE_operatorPower);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 416;
                Match(T__51);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class NumberContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LuaParser.INT, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(LuaParser.HEX, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LuaParser.FLOAT, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_FLOAT() { return GetToken(LuaParser.HEX_FLOAT, 0); }
        public NumberContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_number; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterNumber(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitNumber(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitNumber(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public NumberContext number()
    {
        NumberContext _localctx = new NumberContext(Context, State);
        EnterRule(_localctx, 70, RULE_number);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 418;
                _la = TokenStream.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class StringContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(LuaParser.NORMALSTRING, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSTRING() { return GetToken(LuaParser.CHARSTRING, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGSTRING() { return GetToken(LuaParser.LONGSTRING, 0); }
        public StringContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_string; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterString(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitString(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitString(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public StringContext @string()
    {
        StringContext _localctx = new StringContext(Context, State);
        EnterRule(_localctx, 72, RULE_string);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 420;
                _la = TokenStream.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class NilContext : ParserRuleContext
    {
        public NilContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_nil; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterNil(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitNil(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitNil(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public NilContext nil()
    {
        NilContext _localctx = new NilContext(Context, State);
        EnterRule(_localctx, 74, RULE_nil);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 422;
                Match(T__52);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class BooleanContext : ParserRuleContext
    {
        public BooleanContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_boolean; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.EnterBoolean(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILuaListener typedListener = listener as ILuaListener;
            if (typedListener != null) typedListener.ExitBoolean(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public BooleanContext boolean()
    {
        BooleanContext _localctx = new BooleanContext(Context, State);
        EnterRule(_localctx, 76, RULE_boolean);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 424;
                _la = TokenStream.LA(1);
                if (!(_la == T__53 || _la == T__54))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
    {
        switch (ruleIndex)
        {
            case 11: return exp_sempred((ExpContext)_localctx, predIndex);
        }
        return true;
    }
    private bool exp_sempred(ExpContext _localctx, int predIndex)
    {
        switch (predIndex)
        {
            case 0: return Precpred(Context, 9);
            case 1: return Precpred(Context, 7);
            case 2: return Precpred(Context, 6);
            case 3: return Precpred(Context, 5);
            case 4: return Precpred(Context, 4);
            case 5: return Precpred(Context, 3);
            case 6: return Precpred(Context, 2);
            case 7: return Precpred(Context, 1);
        }
        return true;
    }

    private static char[] _serializedATN = {
        '\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
        '\x5964', '\x3', '\x45', '\x1AD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3',
        '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4',
        '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b',
        '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v',
        '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t',
        '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4',
        '\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t',
        '\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4',
        '\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t',
        '\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4',
        '\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t',
        '\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4',
        ' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4',
        '#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&',
        '\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x3', '\x2',
        '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', 'U', '\n', '\x3',
        '\f', '\x3', '\xE', '\x3', 'X', '\v', '\x3', '\x3', '\x3', '\x5', '\x3',
        '[', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
        '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
        '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
        '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
        '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
        '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
        '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
        '\a', '\x4', '\x7F', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x82', '\v',
        '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x86', '\n', '\x4',
        '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
        '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
        '\x5', '\x4', '\x92', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3',
        '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3',
        '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3',
        '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3',
        '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3',
        '\x4', '\x3', '\x4', '\x5', '\x4', '\xAC', '\n', '\x4', '\x5', '\x4',
        '\xAE', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3',
        '\x5', '\x3', '\x5', '\a', '\x5', '\xB5', '\n', '\x5', '\f', '\x5', '\xE',
        '\x5', '\xB8', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
        '\x5', '\x6', '\xBD', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a',
        '\xC1', '\n', '\a', '\x3', '\a', '\x5', '\a', '\xC4', '\n', '\a', '\x3',
        '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t',
        '\x3', '\t', '\a', '\t', '\xCD', '\n', '\t', '\f', '\t', '\xE', '\t',
        '\xD0', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xD4', '\n',
        '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xD9', '\n',
        '\n', '\f', '\n', '\xE', '\n', '\xDC', '\v', '\n', '\x3', '\v', '\x3',
        '\v', '\x3', '\v', '\a', '\v', '\xE1', '\n', '\v', '\f', '\v', '\xE',
        '\v', '\xE4', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a',
        '\f', '\xE9', '\n', '\f', '\f', '\f', '\xE', '\f', '\xEC', '\v', '\f',
        '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3',
        '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r',
        '\x3', '\r', '\x5', '\r', '\xFA', '\n', '\r', '\x3', '\r', '\x3', '\r',
        '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3',
        '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r',
        '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3',
        '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r',
        '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3',
        '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x11C', '\n', '\r', '\f',
        '\r', '\xE', '\r', '\x11F', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\a',
        '\xE', '\x123', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x126', '\v',
        '\xE', '\x3', '\xF', '\x3', '\xF', '\x6', '\xF', '\x12A', '\n', '\xF',
        '\r', '\xF', '\xE', '\xF', '\x12B', '\x3', '\x10', '\x3', '\x10', '\x3',
        '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x133', '\n', '\x10',
        '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11',
        '\x3', '\x11', '\x5', '\x11', '\x13B', '\n', '\x11', '\x3', '\x11', '\a',
        '\x11', '\x13E', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x141', '\v',
        '\x11', '\x3', '\x12', '\a', '\x12', '\x144', '\n', '\x12', '\f', '\x12',
        '\xE', '\x12', '\x147', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3',
        '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x14F',
        '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x153', '\n',
        '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5',
        '\x14', '\x159', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14',
        '\x5', '\x14', '\x15E', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3',
        '\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x165', '\n', '\x16',
        '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17',
        '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x16E', '\n', '\x17', '\x3',
        '\x17', '\x5', '\x17', '\x171', '\n', '\x17', '\x3', '\x18', '\x3', '\x18',
        '\x5', '\x18', '\x175', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3',
        '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x17D',
        '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x180', '\v', '\x19', '\x3',
        '\x19', '\x5', '\x19', '\x183', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A',
        '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A',
        '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x18F', '\n',
        '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3',
        '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3',
        '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3',
        '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3',
        '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3',
        '(', '\x3', '(', '\x2', '\x3', '\x18', ')', '\x2', '\x4', '\x6', '\b',
        '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C',
        '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34',
        '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J',
        'L', 'N', '\x2', '\v', '\x4', '\x2', '\x3', '\x3', '\x11', '\x11', '\x4',
        '\x2', '\x15', '\x16', '$', '\'', '\x3', '\x2', ')', '*', '\x3', '\x2',
        '+', '.', '\x3', '\x2', '/', '\x33', '\x5', '\x2', '*', '*', '\x31', '\x31',
        '\x34', '\x35', '\x3', '\x2', '>', '\x41', '\x3', '\x2', ';', '=', '\x3',
        '\x2', '\x38', '\x39', '\x2', '\x1C5', '\x2', 'P', '\x3', '\x2', '\x2',
        '\x2', '\x4', 'V', '\x3', '\x2', '\x2', '\x2', '\x6', '\xAD', '\x3', '\x2',
        '\x2', '\x2', '\b', '\xAF', '\x3', '\x2', '\x2', '\x2', '\n', '\xBC',
        '\x3', '\x2', '\x2', '\x2', '\f', '\xBE', '\x3', '\x2', '\x2', '\x2',
        '\xE', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x10', '\xC9', '\x3', '\x2',
        '\x2', '\x2', '\x12', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x14', '\xDD',
        '\x3', '\x2', '\x2', '\x2', '\x16', '\xE5', '\x3', '\x2', '\x2', '\x2',
        '\x18', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x120', '\x3', '\x2',
        '\x2', '\x2', '\x1C', '\x127', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x132',
        '\x3', '\x2', '\x2', '\x2', ' ', '\x13A', '\x3', '\x2', '\x2', '\x2',
        '\"', '\x145', '\x3', '\x2', '\x2', '\x2', '$', '\x152', '\x3', '\x2',
        '\x2', '\x2', '&', '\x15D', '\x3', '\x2', '\x2', '\x2', '(', '\x15F',
        '\x3', '\x2', '\x2', '\x2', '*', '\x162', '\x3', '\x2', '\x2', '\x2',
        ',', '\x170', '\x3', '\x2', '\x2', '\x2', '.', '\x172', '\x3', '\x2',
        '\x2', '\x2', '\x30', '\x178', '\x3', '\x2', '\x2', '\x2', '\x32', '\x18E',
        '\x3', '\x2', '\x2', '\x2', '\x34', '\x190', '\x3', '\x2', '\x2', '\x2',
        '\x36', '\x192', '\x3', '\x2', '\x2', '\x2', '\x38', '\x194', '\x3', '\x2',
        '\x2', '\x2', ':', '\x196', '\x3', '\x2', '\x2', '\x2', '<', '\x198',
        '\x3', '\x2', '\x2', '\x2', '>', '\x19A', '\x3', '\x2', '\x2', '\x2',
        '@', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x42', '\x19E', '\x3', '\x2',
        '\x2', '\x2', '\x44', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1A2',
        '\x3', '\x2', '\x2', '\x2', 'H', '\x1A4', '\x3', '\x2', '\x2', '\x2',
        'J', '\x1A6', '\x3', '\x2', '\x2', '\x2', 'L', '\x1A8', '\x3', '\x2',
        '\x2', '\x2', 'N', '\x1AA', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x5',
        '\x4', '\x3', '\x2', 'Q', 'R', '\a', '\x2', '\x2', '\x3', 'R', '\x3',
        '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x5', '\x6', '\x4', '\x2', 'T',
        'S', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2',
        'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2',
        'W', 'Z', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2',
        'Y', '[', '\x5', '\f', '\a', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2',
        'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\x5', '\x3', '\x2', '\x2',
        '\x2', '\\', '\xAE', '\a', '\x3', '\x2', '\x2', ']', '^', '\x5', '\x12',
        '\n', '\x2', '^', '_', '\a', '\x4', '\x2', '\x2', '_', '`', '\x5', '\x16',
        '\f', '\x2', '`', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x61', '\xAE',
        '\x5', '\x1C', '\xF', '\x2', '\x62', '\xAE', '\x5', '\xE', '\b', '\x2',
        '\x63', '\xAE', '\a', '\x5', '\x2', '\x2', '\x64', '\x65', '\a', '\x6',
        '\x2', '\x2', '\x65', '\xAE', '\a', ':', '\x2', '\x2', '\x66', 'g', '\a',
        '\a', '\x2', '\x2', 'g', 'h', '\x5', '\x4', '\x3', '\x2', 'h', 'i', '\a',
        '\b', '\x2', '\x2', 'i', '\xAE', '\x3', '\x2', '\x2', '\x2', 'j', 'k',
        '\a', '\t', '\x2', '\x2', 'k', 'l', '\x5', '\x18', '\r', '\x2', 'l', 'm',
        '\a', '\a', '\x2', '\x2', 'm', 'n', '\x5', '\x4', '\x3', '\x2', 'n', 'o',
        '\a', '\b', '\x2', '\x2', 'o', '\xAE', '\x3', '\x2', '\x2', '\x2', 'p',
        'q', '\a', '\n', '\x2', '\x2', 'q', 'r', '\x5', '\x4', '\x3', '\x2', 'r',
        's', '\a', '\v', '\x2', '\x2', 's', 't', '\x5', '\x18', '\r', '\x2', 't',
        '\xAE', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\f', '\x2', '\x2',
        'v', 'w', '\x5', '\x18', '\r', '\x2', 'w', 'x', '\a', '\r', '\x2', '\x2',
        'x', '\x80', '\x5', '\x4', '\x3', '\x2', 'y', 'z', '\a', '\xE', '\x2',
        '\x2', 'z', '{', '\x5', '\x18', '\r', '\x2', '{', '|', '\a', '\r', '\x2',
        '\x2', '|', '}', '\x5', '\x4', '\x3', '\x2', '}', '\x7F', '\x3', '\x2',
        '\x2', '\x2', '~', 'y', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x3',
        '\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80',
        '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x85', '\x3', '\x2', '\x2',
        '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a',
        '\xF', '\x2', '\x2', '\x84', '\x86', '\x5', '\x4', '\x3', '\x2', '\x85',
        '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2',
        '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\a',
        '\b', '\x2', '\x2', '\x88', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x89',
        '\x8A', '\a', '\x10', '\x2', '\x2', '\x8A', '\x8B', '\a', ':', '\x2',
        '\x2', '\x8B', '\x8C', '\a', '\x4', '\x2', '\x2', '\x8C', '\x8D', '\x5',
        '\x18', '\r', '\x2', '\x8D', '\x8E', '\a', '\x11', '\x2', '\x2', '\x8E',
        '\x91', '\x5', '\x18', '\r', '\x2', '\x8F', '\x90', '\a', '\x11', '\x2',
        '\x2', '\x90', '\x92', '\x5', '\x18', '\r', '\x2', '\x91', '\x8F', '\x3',
        '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92',
        '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\a', '\x2',
        '\x2', '\x94', '\x95', '\x5', '\x4', '\x3', '\x2', '\x95', '\x96', '\a',
        '\b', '\x2', '\x2', '\x96', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x97',
        '\x98', '\a', '\x10', '\x2', '\x2', '\x98', '\x99', '\x5', '\x14', '\v',
        '\x2', '\x99', '\x9A', '\a', '\x12', '\x2', '\x2', '\x9A', '\x9B', '\x5',
        '\x16', '\f', '\x2', '\x9B', '\x9C', '\a', '\a', '\x2', '\x2', '\x9C',
        '\x9D', '\x5', '\x4', '\x3', '\x2', '\x9D', '\x9E', '\a', '\b', '\x2',
        '\x2', '\x9E', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a',
        '\x13', '\x2', '\x2', '\xA0', '\xA1', '\x5', '\x10', '\t', '\x2', '\xA1',
        '\xA2', '\x5', '*', '\x16', '\x2', '\xA2', '\xAE', '\x3', '\x2', '\x2',
        '\x2', '\xA3', '\xA4', '\a', '\x14', '\x2', '\x2', '\xA4', '\xA5', '\a',
        '\x13', '\x2', '\x2', '\xA5', '\xA6', '\a', ':', '\x2', '\x2', '\xA6',
        '\xAE', '\x5', '*', '\x16', '\x2', '\xA7', '\xA8', '\a', '\x14', '\x2',
        '\x2', '\xA8', '\xAB', '\x5', '\b', '\x5', '\x2', '\xA9', '\xAA', '\a',
        '\x4', '\x2', '\x2', '\xAA', '\xAC', '\x5', '\x16', '\f', '\x2', '\xAB',
        '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2',
        '\x2', '\xAC', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAD', '\\', '\x3',
        '\x2', '\x2', '\x2', '\xAD', ']', '\x3', '\x2', '\x2', '\x2', '\xAD',
        '\x61', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x62', '\x3', '\x2', '\x2',
        '\x2', '\xAD', '\x63', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x64', '\x3',
        '\x2', '\x2', '\x2', '\xAD', '\x66', '\x3', '\x2', '\x2', '\x2', '\xAD',
        'j', '\x3', '\x2', '\x2', '\x2', '\xAD', 'p', '\x3', '\x2', '\x2', '\x2',
        '\xAD', 'u', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x89', '\x3', '\x2',
        '\x2', '\x2', '\xAD', '\x97', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x9F',
        '\x3', '\x2', '\x2', '\x2', '\xAD', '\xA3', '\x3', '\x2', '\x2', '\x2',
        '\xAD', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAE', '\a', '\x3', '\x2',
        '\x2', '\x2', '\xAF', '\xB0', '\a', ':', '\x2', '\x2', '\xB0', '\xB6',
        '\x5', '\n', '\x6', '\x2', '\xB1', '\xB2', '\a', '\x11', '\x2', '\x2',
        '\xB2', '\xB3', '\a', ':', '\x2', '\x2', '\xB3', '\xB5', '\x5', '\n',
        '\x6', '\x2', '\xB4', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8',
        '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2',
        '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\t', '\x3', '\x2',
        '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA',
        '\a', '\x15', '\x2', '\x2', '\xBA', '\xBB', '\a', ':', '\x2', '\x2', '\xBB',
        '\xBD', '\a', '\x16', '\x2', '\x2', '\xBC', '\xB9', '\x3', '\x2', '\x2',
        '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\v', '\x3',
        '\x2', '\x2', '\x2', '\xBE', '\xC0', '\a', '\x17', '\x2', '\x2', '\xBF',
        '\xC1', '\x5', '\x16', '\f', '\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2',
        '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC3', '\x3',
        '\x2', '\x2', '\x2', '\xC2', '\xC4', '\a', '\x3', '\x2', '\x2', '\xC3',
        '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2',
        '\x2', '\xC4', '\r', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a',
        '\x18', '\x2', '\x2', '\xC6', '\xC7', '\a', ':', '\x2', '\x2', '\xC7',
        '\xC8', '\a', '\x18', '\x2', '\x2', '\xC8', '\xF', '\x3', '\x2', '\x2',
        '\x2', '\xC9', '\xCE', '\a', ':', '\x2', '\x2', '\xCA', '\xCB', '\a',
        '\x19', '\x2', '\x2', '\xCB', '\xCD', '\a', ':', '\x2', '\x2', '\xCC',
        '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xD0', '\x3', '\x2', '\x2',
        '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3',
        '\x2', '\x2', '\x2', '\xCF', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD0',
        '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x1A', '\x2',
        '\x2', '\xD2', '\xD4', '\a', ':', '\x2', '\x2', '\xD3', '\xD1', '\x3',
        '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4',
        '\x11', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xDA', '\x5', ' ', '\x11',
        '\x2', '\xD6', '\xD7', '\a', '\x11', '\x2', '\x2', '\xD7', '\xD9', '\x5',
        ' ', '\x11', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD9',
        '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2',
        '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\x13', '\x3',
        '\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD',
        '\xE2', '\a', ':', '\x2', '\x2', '\xDE', '\xDF', '\a', '\x11', '\x2',
        '\x2', '\xDF', '\xE1', '\a', ':', '\x2', '\x2', '\xE0', '\xDE', '\x3',
        '\x2', '\x2', '\x2', '\xE1', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE2',
        '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2',
        '\x2', '\xE3', '\x15', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3',
        '\x2', '\x2', '\x2', '\xE5', '\xEA', '\x5', '\x18', '\r', '\x2', '\xE6',
        '\xE7', '\a', '\x11', '\x2', '\x2', '\xE7', '\xE9', '\x5', '\x18', '\r',
        '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEC', '\x3',
        '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA',
        '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\x17', '\x3', '\x2', '\x2',
        '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\b',
        '\r', '\x1', '\x2', '\xEE', '\xFA', '\x5', 'L', '\'', '\x2', '\xEF', '\xFA',
        '\x5', 'N', '(', '\x2', '\xF0', '\xFA', '\x5', 'H', '%', '\x2', '\xF1',
        '\xFA', '\x5', 'J', '&', '\x2', '\xF2', '\xFA', '\a', '\x1B', '\x2', '\x2',
        '\xF3', '\xFA', '\x5', '(', '\x15', '\x2', '\xF4', '\xFA', '\x5', '\x1A',
        '\xE', '\x2', '\xF5', '\xFA', '\x5', '.', '\x18', '\x2', '\xF6', '\xF7',
        '\x5', '\x44', '#', '\x2', '\xF7', '\xF8', '\x5', '\x18', '\r', '\n',
        '\xF8', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xED', '\x3', '\x2',
        '\x2', '\x2', '\xF9', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF0',
        '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF1', '\x3', '\x2', '\x2', '\x2',
        '\xF9', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF3', '\x3', '\x2',
        '\x2', '\x2', '\xF9', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF5',
        '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF6', '\x3', '\x2', '\x2', '\x2',
        '\xFA', '\x11D', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\f', '\v',
        '\x2', '\x2', '\xFC', '\xFD', '\x5', '\x46', '$', '\x2', '\xFD', '\xFE',
        '\x5', '\x18', '\r', '\v', '\xFE', '\x11C', '\x3', '\x2', '\x2', '\x2',
        '\xFF', '\x100', '\f', '\t', '\x2', '\x2', '\x100', '\x101', '\x5', '@',
        '!', '\x2', '\x101', '\x102', '\x5', '\x18', '\r', '\n', '\x102', '\x11C',
        '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\f', '\b', '\x2', '\x2',
        '\x104', '\x105', '\x5', '>', ' ', '\x2', '\x105', '\x106', '\x5', '\x18',
        '\r', '\t', '\x106', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108',
        '\f', '\a', '\x2', '\x2', '\x108', '\x109', '\x5', '<', '\x1F', '\x2',
        '\x109', '\x10A', '\x5', '\x18', '\r', '\a', '\x10A', '\x11C', '\x3',
        '\x2', '\x2', '\x2', '\x10B', '\x10C', '\f', '\x6', '\x2', '\x2', '\x10C',
        '\x10D', '\x5', ':', '\x1E', '\x2', '\x10D', '\x10E', '\x5', '\x18', '\r',
        '\a', '\x10E', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110',
        '\f', '\x5', '\x2', '\x2', '\x110', '\x111', '\x5', '\x38', '\x1D', '\x2',
        '\x111', '\x112', '\x5', '\x18', '\r', '\x6', '\x112', '\x11C', '\x3',
        '\x2', '\x2', '\x2', '\x113', '\x114', '\f', '\x4', '\x2', '\x2', '\x114',
        '\x115', '\x5', '\x36', '\x1C', '\x2', '\x115', '\x116', '\x5', '\x18',
        '\r', '\x5', '\x116', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118',
        '\f', '\x3', '\x2', '\x2', '\x118', '\x119', '\x5', '\x42', '\"', '\x2',
        '\x119', '\x11A', '\x5', '\x18', '\r', '\x4', '\x11A', '\x11C', '\x3',
        '\x2', '\x2', '\x2', '\x11B', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x11B',
        '\xFF', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x103', '\x3', '\x2', '\x2',
        '\x2', '\x11B', '\x107', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x10B',
        '\x3', '\x2', '\x2', '\x2', '\x11B', '\x10F', '\x3', '\x2', '\x2', '\x2',
        '\x11B', '\x113', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x117', '\x3',
        '\x2', '\x2', '\x2', '\x11C', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11D',
        '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2',
        '\x2', '\x11E', '\x19', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x11D',
        '\x3', '\x2', '\x2', '\x2', '\x120', '\x124', '\x5', '\x1E', '\x10', '\x2',
        '\x121', '\x123', '\x5', '$', '\x13', '\x2', '\x122', '\x121', '\x3',
        '\x2', '\x2', '\x2', '\x123', '\x126', '\x3', '\x2', '\x2', '\x2', '\x124',
        '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x3', '\x2', '\x2',
        '\x2', '\x125', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x126', '\x124',
        '\x3', '\x2', '\x2', '\x2', '\x127', '\x129', '\x5', '\x1E', '\x10', '\x2',
        '\x128', '\x12A', '\x5', '$', '\x13', '\x2', '\x129', '\x128', '\x3',
        '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B',
        '\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2',
        '\x2', '\x12C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x133',
        '\x5', ' ', '\x11', '\x2', '\x12E', '\x12F', '\a', '\x1C', '\x2', '\x2',
        '\x12F', '\x130', '\x5', '\x18', '\r', '\x2', '\x130', '\x131', '\a',
        '\x1D', '\x2', '\x2', '\x131', '\x133', '\x3', '\x2', '\x2', '\x2', '\x132',
        '\x12D', '\x3', '\x2', '\x2', '\x2', '\x132', '\x12E', '\x3', '\x2', '\x2',
        '\x2', '\x133', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x134', '\x13B',
        '\a', ':', '\x2', '\x2', '\x135', '\x136', '\a', '\x1C', '\x2', '\x2',
        '\x136', '\x137', '\x5', '\x18', '\r', '\x2', '\x137', '\x138', '\a',
        '\x1D', '\x2', '\x2', '\x138', '\x139', '\x5', '\"', '\x12', '\x2', '\x139',
        '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x134', '\x3', '\x2', '\x2',
        '\x2', '\x13A', '\x135', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13F',
        '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', '\x5', '\"', '\x12', '\x2',
        '\x13D', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x141', '\x3',
        '\x2', '\x2', '\x2', '\x13F', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13F',
        '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '!', '\x3', '\x2', '\x2',
        '\x2', '\x141', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x142', '\x144',
        '\x5', '$', '\x13', '\x2', '\x143', '\x142', '\x3', '\x2', '\x2', '\x2',
        '\x144', '\x147', '\x3', '\x2', '\x2', '\x2', '\x145', '\x143', '\x3',
        '\x2', '\x2', '\x2', '\x145', '\x146', '\x3', '\x2', '\x2', '\x2', '\x146',
        '\x14E', '\x3', '\x2', '\x2', '\x2', '\x147', '\x145', '\x3', '\x2', '\x2',
        '\x2', '\x148', '\x149', '\a', '\x1E', '\x2', '\x2', '\x149', '\x14A',
        '\x5', '\x18', '\r', '\x2', '\x14A', '\x14B', '\a', '\x1F', '\x2', '\x2',
        '\x14B', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\a',
        '\x19', '\x2', '\x2', '\x14D', '\x14F', '\a', ':', '\x2', '\x2', '\x14E',
        '\x148', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14C', '\x3', '\x2', '\x2',
        '\x2', '\x14F', '#', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\a',
        '\x1A', '\x2', '\x2', '\x151', '\x153', '\a', ':', '\x2', '\x2', '\x152',
        '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\x3', '\x2', '\x2',
        '\x2', '\x153', '\x154', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155',
        '\x5', '&', '\x14', '\x2', '\x155', '%', '\x3', '\x2', '\x2', '\x2', '\x156',
        '\x158', '\a', '\x1C', '\x2', '\x2', '\x157', '\x159', '\x5', '\x16',
        '\f', '\x2', '\x158', '\x157', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159',
        '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2',
        '\x15A', '\x15E', '\a', '\x1D', '\x2', '\x2', '\x15B', '\x15E', '\x5',
        '.', '\x18', '\x2', '\x15C', '\x15E', '\x5', 'J', '&', '\x2', '\x15D',
        '\x156', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2',
        '\x2', '\x15D', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15E', '\'', '\x3',
        '\x2', '\x2', '\x2', '\x15F', '\x160', '\a', '\x13', '\x2', '\x2', '\x160',
        '\x161', '\x5', '*', '\x16', '\x2', '\x161', ')', '\x3', '\x2', '\x2',
        '\x2', '\x162', '\x164', '\a', '\x1C', '\x2', '\x2', '\x163', '\x165',
        '\x5', ',', '\x17', '\x2', '\x164', '\x163', '\x3', '\x2', '\x2', '\x2',
        '\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x3',
        '\x2', '\x2', '\x2', '\x166', '\x167', '\a', '\x1D', '\x2', '\x2', '\x167',
        '\x168', '\x5', '\x4', '\x3', '\x2', '\x168', '\x169', '\a', '\b', '\x2',
        '\x2', '\x169', '+', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16D', '\x5',
        '\x14', '\v', '\x2', '\x16B', '\x16C', '\a', '\x11', '\x2', '\x2', '\x16C',
        '\x16E', '\a', '\x1B', '\x2', '\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2',
        '\x2', '\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x171',
        '\x3', '\x2', '\x2', '\x2', '\x16F', '\x171', '\a', '\x1B', '\x2', '\x2',
        '\x170', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16F', '\x3',
        '\x2', '\x2', '\x2', '\x171', '-', '\x3', '\x2', '\x2', '\x2', '\x172',
        '\x174', '\a', ' ', '\x2', '\x2', '\x173', '\x175', '\x5', '\x30', '\x19',
        '\x2', '\x174', '\x173', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175',
        '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\x3', '\x2', '\x2', '\x2',
        '\x176', '\x177', '\a', '!', '\x2', '\x2', '\x177', '/', '\x3', '\x2',
        '\x2', '\x2', '\x178', '\x17E', '\x5', '\x32', '\x1A', '\x2', '\x179',
        '\x17A', '\x5', '\x34', '\x1B', '\x2', '\x17A', '\x17B', '\x5', '\x32',
        '\x1A', '\x2', '\x17B', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17C',
        '\x179', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x180', '\x3', '\x2', '\x2',
        '\x2', '\x17E', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F',
        '\x3', '\x2', '\x2', '\x2', '\x17F', '\x182', '\x3', '\x2', '\x2', '\x2',
        '\x180', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x181', '\x183', '\x5',
        '\x34', '\x1B', '\x2', '\x182', '\x181', '\x3', '\x2', '\x2', '\x2', '\x182',
        '\x183', '\x3', '\x2', '\x2', '\x2', '\x183', '\x31', '\x3', '\x2', '\x2',
        '\x2', '\x184', '\x185', '\a', '\x1E', '\x2', '\x2', '\x185', '\x186',
        '\x5', '\x18', '\r', '\x2', '\x186', '\x187', '\a', '\x1F', '\x2', '\x2',
        '\x187', '\x188', '\a', '\x4', '\x2', '\x2', '\x188', '\x189', '\x5',
        '\x18', '\r', '\x2', '\x189', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x18A',
        '\x18B', '\a', ':', '\x2', '\x2', '\x18B', '\x18C', '\a', '\x4', '\x2',
        '\x2', '\x18C', '\x18F', '\x5', '\x18', '\r', '\x2', '\x18D', '\x18F',
        '\x5', '\x18', '\r', '\x2', '\x18E', '\x184', '\x3', '\x2', '\x2', '\x2',
        '\x18E', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18D', '\x3',
        '\x2', '\x2', '\x2', '\x18F', '\x33', '\x3', '\x2', '\x2', '\x2', '\x190',
        '\x191', '\t', '\x2', '\x2', '\x2', '\x191', '\x35', '\x3', '\x2', '\x2',
        '\x2', '\x192', '\x193', '\a', '\"', '\x2', '\x2', '\x193', '\x37', '\x3',
        '\x2', '\x2', '\x2', '\x194', '\x195', '\a', '#', '\x2', '\x2', '\x195',
        '\x39', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\t', '\x3', '\x2',
        '\x2', '\x197', ';', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\a',
        '(', '\x2', '\x2', '\x199', '=', '\x3', '\x2', '\x2', '\x2', '\x19A',
        '\x19B', '\t', '\x4', '\x2', '\x2', '\x19B', '?', '\x3', '\x2', '\x2',
        '\x2', '\x19C', '\x19D', '\t', '\x5', '\x2', '\x2', '\x19D', '\x41', '\x3',
        '\x2', '\x2', '\x2', '\x19E', '\x19F', '\t', '\x6', '\x2', '\x2', '\x19F',
        '\x43', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\t', '\a', '\x2',
        '\x2', '\x1A1', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3',
        '\a', '\x36', '\x2', '\x2', '\x1A3', 'G', '\x3', '\x2', '\x2', '\x2',
        '\x1A4', '\x1A5', '\t', '\b', '\x2', '\x2', '\x1A5', 'I', '\x3', '\x2',
        '\x2', '\x2', '\x1A6', '\x1A7', '\t', '\t', '\x2', '\x2', '\x1A7', 'K',
        '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\a', '\x37', '\x2', '\x2',
        '\x1A9', 'M', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\t', '\n',
        '\x2', '\x2', '\x1AB', 'O', '\x3', '\x2', '\x2', '\x2', '&', 'V', 'Z',
        '\x80', '\x85', '\x91', '\xAB', '\xAD', '\xB6', '\xBC', '\xC0', '\xC3',
        '\xCE', '\xD3', '\xDA', '\xE2', '\xEA', '\xF9', '\x11B', '\x11D', '\x124',
        '\x12B', '\x132', '\x13A', '\x13F', '\x145', '\x14E', '\x152', '\x158',
        '\x15D', '\x164', '\x16D', '\x170', '\x174', '\x17E', '\x182', '\x18E',
    };

    public static readonly ATN _ATN =
        new ATNDeserializer().Deserialize(_serializedATN);


}
